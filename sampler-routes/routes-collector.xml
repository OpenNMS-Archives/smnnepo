<bp:blueprint
    xmlns="http://camel.apache.org/schema/blueprint"
	xmlns:bp="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xsi:schemaLocation="
	    http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint-2.9.6.xsd
		http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
		https://svn.apache.org/repos/asf/aries/tags/blueprint-0.3.1/blueprint-cm/src/main/resources/org/apache/aries/blueprint/compendium/cm/blueprint-cm-1.1.0.xsd
		http://www.osgi.org/xmlns/blueprint-ext/v1.1.0
		https://svn.apache.org/repos/asf/aries/tags/blueprint-0.3.1/blueprint-core/src/main/resources/org/apache/aries/blueprint/ext/blueprint-ext.xsd"     
>

  <bp:reference id="snmpAgentRepository" interface="org.opennms.netmgt.api.sample.AgentRepository" filter="(protocol=SNMP)" />
  <bp:reference id="snmpCollectionConfiguration" interface="org.opennms.netmgt.api.sample.CollectionConfiguration" filter="(protocol=SNMP)" />
  <bp:reference id="snmpCollector" interface="org.opennms.netmgt.sampler.snmp.SnmpCollector" />

  <bp:bean id="collectdConfigService" class="org.... CollectdConfig">
    <bp:property name="url" value="file:collectd-configuraiton.xml" />
  </bp:bean>
    
  <camelContext>
  
    <!-- 
      collectd-config
       - package
         - 'agent list identifier' (built from filter rule, include-range, etc.)
         - services each with its own interval
         
       load:
       CollectdConfigService
         - parseConfig
           - stores 
           
       schedule:
         - get package/service pairs with interval 
           
       
         
      
       
    
    -->
    
    <route id="scheduleStuff">
      <from uri="seda:startUp" />
      <!-- 
        returns [
                  { packageName: "example1", serviceName: "JMX", interval=300s, agentListIdentifer="example1devices"},
                  { packageName: "example1", serviceName: "SNMP", interval=300s, agentListIdentifer="example1devices"}
                 ] 
       -->
      <bean ref="collectConfigService" method="getServiceList" />
	  <split>
	     <simple>${body}</simple>
	     <to uri="seda:scheduleService" />
	  </split>
    </route>
    
    <route id="scheduleService" >
      <from uri="seda:scheduleService" />
      <!--
        takes ("example1Device", "JMX:)
        returns
        [ node1/JMX, node2/JMX, node3/JMX,......]
       -->
      <bean ref="agentRepository" method="getAgents" />
      <!-- turn create a new collectionRequest for an agent -->
      <split>
        <simple>${body}</simple>
        <to uri="seda:fillInRequest?concurrentConsumers=10" />
      </split>
    </route>
    
    <route id="fillInRequest">
        <from uri="seda:fillInRequest" />
        <!-- create collection request for each agent -->
        <bean ref="collectionRequestFactory" method="createRequest" />
        <bean ref="credentials" method="fillinCredentials" />
        <bean ref="collectionConfig" method="fillinJmxVariables" /> 
        <!--  send the filled in collection request to be scheduled -->
        <to uri="seda:scheduleRequest" />
    </route>
    
    <route id="scheduleRequest">
      <from uri="seda:scheduleRequest" />
      <!-- determine next scheduled collection for given request -->
      <bean ref="scheduler" method="createNextCollectionRequest" />
      <!--  set the timer for the next scheduled collection -->
      <to uri="quartz2:collectionTimer" /> 
    </route>
    
    <route id="doCollection">
      <!-- receive time to collect messages each containing a collectionRequest  -->
      <from uri="quartz2:collectionTimer" />
      <!-- pass it to collector -->
      <bean ref="collector" method="collect" />
      <multicast stopOnException="false">
        <pipeline>
            <!-- reschedule collection request by pulling the request out of the result -->
			<transform>
     		   <simple>${body.request}</simple>
    		</transform>
    		<!-- send request back scheduling route -->
    		<to uri="seda:scheduleRequest"/>
        </pipeline>
        <!--  deliver results to persistence -->
        <to uri="seda:deliver"/>
      </multicast>
    </route>
    
    <route id="deliver">
      <from uri="seda:deliver" />
      <to uri="mina2:tcp://uzbekistan.local.:1976" />
    </route>
    
    <!-- 
    <route id="addAgent">
      <from uri="seda:addAgent" />
      <bean ref="snmpAgentRepository" method="addAgent" />
      <log message="Agent ${body} added." />
    </route>
  
    <route id="collectionTimer">
      <from uri="timer://collectTimer?fixedRate=true&amp;period=1s&amp;delay=3000" />
      <transform><constant>SNMP</constant></transform>
      <log message="${body}" />
      <to uri="seda:doCollection" />
    </route>
    
    <route id="doCollection">
      <from uri="seda:doCollection" />
	  <bean ref="snmpAgentRepository" method="getAgentsByProtocol"/>
	  <split>
	    <simple>${body}</simple>
	    <log message="Split Agent: ${body}" />
	    <to uri="seda:collectAgents" />
	  </split>
    </route>
    
    <route id="collectAgents">
      <from uri="seda:collectAgents" />
	  <bean ref="snmpCollectionConfiguration" method="createRequestForAgent" />
	  <log message="About to collect: ${body}" />
	  <bean ref="snmpCollector" method="collect" />      
	  <log message="Finished collection." />
	  <to uri="seda:sampleSets" />
    </route>
    
    
    <route id="deliver">
      <from uri="seda:deliver" />
      <to uri="activemq:sampleSets" />
    </route>
    -->
    
  </camelContext>

<!--
  <bp:bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
    <bp:property name="brokerURL" value="tcp://localhost:61616" />
  </bp:bean>
-->

</bp:blueprint>
