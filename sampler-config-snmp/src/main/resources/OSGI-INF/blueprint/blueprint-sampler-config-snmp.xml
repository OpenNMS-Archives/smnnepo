<blueprint
	xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0
		http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd

		http://camel.apache.org/schema/blueprint
		http://camel.apache.org/schema/blueprint/camel-blueprint-2.12.2.xsd
">

  <!-- Override with an etc/org.opennms.netmgt.sample.config.configuration.snmp.cfg -->
  <!-- Configuration properties -->
  <cm:property-placeholder id="properties" persistent-id="org.opennms.netmgt.sampler.config.snmp" update-strategy="none">
    <cm:default-properties>
      <cm:property name="opennms.home" value="/opt/opennms"/>

      <!-- TODO: Figure out how to use the same type of token replacement in these strings -->

      <cm:property name="snmpConfigUrl" value="file:{{opennms.home}}/etc/snmp-config.xml"/>

      <cm:property name="datacollectionFileUrl" value="file:${opennms.home}/etc/datacollection-config.xml" />
      <cm:property name="datacollectionGroupUrls" value="
        file:${opennms.home}/etc/datacollection/mib2.xml,
        file:${opennms.home}/etc/datacollection/netsnmp.xml,
        file:${opennms.home}/etc/datacollection/dell.xml
      "/>
    </cm:default-properties>
  </cm:property-placeholder>

  <!-- Camel unmarshalling DataFormats -->
  <bean id="snmpConfigXmlFormat" class="org.opennms.netmgt.sampler.config.snmp.DataFormatUtils" factory-method="snmpConfigXml"/>

  <!-- Beans that hold a copy of a configuration object -->
  <bean id="snmpConfigFactory" class="org.opennms.netmgt.api.sample.support.SingletonBeanFactoryImpl"/>
  <bean id="snmpMetricRepository" class="org.opennms.netmgt.sampler.config.snmp.SnmpMetricRepository">
    <argument value="${datacollectionFileUrl}"/>
    <argument value="${datacollectionGroupUrls}"/>
  </bean>

  <!-- Camel EIP helper beans -->
  <bean id="urlNormalizer" class="org.opennms.netmgt.api.sample.support.UrlNormalizer"/>

  <service ref="snmpConfigFactory" interface="org.opennms.netmgt.api.sample.support.SingletonBeanFactory">
    <service-properties>
      <entry key="beanClass" value="org.opennms.netmgt.config.snmp.SnmpConfig" />
    </service-properties>
  </service>

  <service ref="snmpMetricRepository">
    <interfaces>
     <value>org.opennms.netmgt.api.sample.CollectionConfiguration</value>
     <value>org.opennms.netmgt.api.sample.MetricRepository</value>
    </interfaces>
    <service-properties>
      <entry key="protocol" value="SNMP"/>
    </service-properties>
  </service>

  <bean id="snmpAgentRepository" class="org.opennms.netmgt.sampler.config.snmp.SnmpAgentRepository"/>

  <service ref="snmpAgentRepository" interface="org.opennms.netmgt.api.sample.AgentRepository">
    <service-properties>
      <entry key="protocol" value="SNMP"/>
    </service-properties>
  </service>

  <!--
  <command-bundle xmlns="http://karaf.apache.org/xmlns/shell/v1.0.0">
    <command  name="snmp:add-agent">
      <action class="org.opennms.netmgt.sampler.config.snmp.SnmpAddAgentCommand">
        <property name="snmpAgentRepository" ref="snmpAgentRepository" />
      </action>
    </command>
  </command-bundle>
  -->

  <camelContext id="samplerConfigSnmpCamelContext" xmlns="http://camel.apache.org/schema/blueprint">
    <propertyPlaceholder location="blueprint:properties"/>

    <!-- Add exception handlers -->
    <onException>
      <exception>java.io.IOException</exception>
      <handled><constant>true</constant></handled>
      <!-- .logStackTrace(true) -->
      <stop/>
    </onException>

    <!-- Call this to retrieve a URL in string form or URL form into the JAXB objects they represent. -->
    <route id="parseSnmpXml">
      <from uri="direct:parseSnmpXml"/>
      <log message="blueprint-sampler-config-snmp.xml: Parsing SNMP XML: ${body}" />
      <bean ref="urlNormalizer"/>
      <unmarshal ref="snmpConfigXmlFormat"/>
    </route>

    <!-- Direct route to fetch the config -->
    <route id="snmpConfig">
      <from uri="direct:snmpConfig"/>
      <log message="blueprint-sampler-config-snmp.xml: Getting SNMP configuration" />
      <bean ref="snmpConfigFactory" method="getInstance"/>
    </route>

    <route id="fireStartSamplerConfigSnmp">
      <from uri="timer://runOnce?repeatCount=1&amp;delay=5000" />
      <log message="blueprint-sampler-config-snmp.xml: Triggering Startup" />
      <to uri="direct:start" />
    </route>

    <route id="loadAllConfigs">
      <from uri="direct:start"/>
      <log message="blueprint-sampler-config-snmp.xml: Loading Configuration Files" />
      <!-- Load all of the configs -->
      <multicast parallelProcessing="true">
        <to uri="direct:loadDataCollectionConfig"/>
        <to uri="direct:loadSnmpConfig"/>
      </multicast>
      <log message="blueprint-sampler-config-snmp.xml: Configuration Files Loaded" />
      <!-- TODO: Do something else? -->
    </route>

	<!-- TODO: Create a reload timer that will check for changes to the config -->
    <route id="loadDataCollectionConfig">
      <from uri="direct:loadDataCollectionConfig"/>
      <log message="blueprint-sampler-config-snmp.xml: Refreshing snmpMetricRepository" />
      <bean ref="snmpMetricRepository" method="refresh"/>
    </route>

	<!-- TODO: Create a reload timer that will check for changes to the config -->
    <route id="loadSnmpConfig">
      <from uri="direct:loadSnmpConfig"/>
      <log message="blueprint-sampler-config-snmp.xml: Loading SNMP Configuration" />
      <transform><constant>{{snmpConfigUrl}}</constant></transform>
      <to uri="direct:parseSnmpXml"/>
      <log message="blueprint-sampler-config-snmp.xml: SNMP Configuration parsed, setting instance" />
      <bean ref="snmpConfigFactory" method="setInstance"/>
    </route>

  </camelContext>

</blueprint>
