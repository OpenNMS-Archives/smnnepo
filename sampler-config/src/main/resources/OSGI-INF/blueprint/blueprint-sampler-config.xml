<blueprint
	xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0
		http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd

		http://camel.apache.org/schema/blueprint
		http://camel.apache.org/schema/blueprint/camel-blueprint-2.12.2.xsd
">

  <!-- Configuration properties -->
  <cm:property-placeholder id="properties" persistent-id="org.opennms.netmgt.sampler.config" update-strategy="none">
    <cm:default-properties>
      <cm:property name="opennms.home" value="/opt/opennms"/>
      <cm:property name="collectdConfigUrl" value="file:{{opennms.home}}/etc/collectd-configuration.xml"/>
      <cm:property name="agentListUrl" value="file:{{opennms.home}}/agents"/>
    </cm:default-properties>
  </cm:property-placeholder>

  <!-- Camel unmarshalling DataFormats -->
  <bean id="jaxbXml" class="org.opennms.netmgt.sampler.config.DataFormatUtils" factory-method="jaxbXml"/>

  <!-- Beans that hold a copy of a configuration object -->
  <bean id="collectdConfiguration" class="org.opennms.netmgt.api.sample.support.SingletonBeanFactory"/>
  <bean id="snmpConfiguration" class="org.opennms.netmgt.api.sample.support.SingletonBeanFactory"/>

  <!-- Camel EIP helper beans -->
  <bean id="urlNormalizer" class="org.opennms.netmgt.api.sample.support.UrlNormalizer"/>
  <bean id="packageServiceSplitter" class="org.opennms.netmgt.sampler.config.internal.PackageServiceSplitter"/>
  <bean id="packageAgentAggregator" class="org.opennms.netmgt.sampler.config.internal.PackageAgentAggregator"/>

  <!-- Register a whiteboard of schedulers where agents messages will be sent -->
  <bean id="schedulingDispatcher" class="org.opennms.netmgt.api.sample.support.DispatcherWhiteboard">
    <argument value="seda:scheduleAgents"/>

    <property name="context" ref="blueprintBundleContext"/>
    <property name="messageClass" value="org.opennms.netmgt.api.sample.PackageAgentList"/>
    <property name="serviceClass" value="org.opennms.netmgt.api.sample.support.SchedulerService"/>
    <property name="methodName" value="schedule"/>
  </bean>

  <camelContext xmlns="http://camel.apache.org/schema/blueprint">
    <propertyPlaceholder location="blueprint:properties"/>

    <!-- Add exception handlers -->
    <onException>
      <exception>java.io.IOException</exception>
      <handled><constant>true</constant></handled>
      <!-- .logStackTrace(true) -->
      <stop/>
    </onException>

    <!-- Call this to retrieve a URL in string form or URL form into the JAXB objects they represent. -->
    <route>
      <from uri="direct:parseJaxbXml"/>
      <bean ref="urlNormalizer"/>
      <unmarshal ref="jaxbXml"/>
    </route>

    <!-- Direct route to fetch the config -->
    <route>
      <from uri="direct:collectdConfig"/>
      <bean ref="collectdConfiguration" method="getInstance"/>
    </route>

    <route>
      <from uri="direct:start"/>
      <!-- Load all of the configs -->
      <multicast parallelProcessing="true">
        <to uri="direct:loadCollectdConfiguration"/>
      </multicast>
      <log message="==== Configurations Loaded ===="/>
      <!-- Launch the scheduler -->
      <to uri="direct:schedulerStart"/>
    </route>

	<!-- TODO: Create a reload timer that will check for changes to the config -->
    <route>
      <from uri="direct:loadCollectdConfiguration"/>
      <transform><constant>{{collectdConfigUrl}}</constant></transform>
      <to uri="direct:parseJaxbXml"/>
      <bean ref="collectdConfiguration" method="setInstance"/>
    </route>

    <route>
      <from uri="direct:schedulerStart"/>
      <to uri="direct:loadCollectionPackages"/>
    </route>
    
    <!-- Get all of the collection packages that are associated with the current config -->
    <route>
      <from uri="direct:loadCollectionPackages"/>
      <!-- Replace the current message with the CollectdConfiguration -->
      <enrich uri="direct:collectdConfig"/>
      <!-- Split the CollectdConfiguration into a list of the packages that it contains -->
      <log message="Parsing CollectdConfiguration with ${body.packages.size} package(s)"/>
      <transform><simple>${body.packages}</simple></transform>
      <split>
        <simple>${body}</simple>
        <!-- Split the package into a package-per-service -->
        <log message="Parsing package ${body.name} with ${body.services.size} service(s)"/>
        <process ref="packageServiceSplitter"/>
        <split>
          <simple>${body}</simple>
          <!-- 
          <!- - Route different service types to different routes - ->
          <choice>
            <when>
              <simple>${body.services[0].name} == 'SNMP'</simple>
              <to uri="seda:loadSnmpAgents"/>
            </when>
            <when>
              <simple>${body.services[0].name} == 'JMX'</simple>
              <to uri="seda:loadJmxAgents"/>
            </when>
            <otherwise>
              <!- - Throw exception? - ->
              <!- - throwException(new UnsupportedOperationException("Cannot process service ${body}")) - ->
            </otherwise>
          </choice>
          -->
          <to uri="seda:loadPackageAgents"/>
        </split>
      </split>
    </route>

    <!-- 
    <route>
      <from uri="seda:loadSnmpAgents"/>
      <log message="Loading package ${body.name} with ${body.services.size} service(s)"/>
      <log message="Running seda:loadSnmpAgents"/>
      <to uri="seda:loadPackageAgents"/>
    </route>

    <route>
      <from uri="seda:loadJmxAgents"/>
      <log message="Running seda:loadJmxAgents"/>
      <to uri="seda:loadPackageAgents"/>
    </route>
    -->

    <route>
      <from uri="seda:loadPackageAgents"/>
      <enrich uri="direct:getServiceAgents" strategyRef="packageAgentAggregator"/>
      <filter>
        <simple>${body.agents.size} &gt; 0</simple>
        <log message="Package: ${body.package}, Agents: ${body.agents}"/>
        <!-- This endpoint is serviced by the schedulingDispatcher bean -->
        <to uri="seda:scheduleAgents"/>
      </filter>
    </route>

    <route>
      <from uri="direct:getServiceAgents"/>
      <transform>
        <simple>{{agentListUrl}}/${body.name}/${body.services[0].name}.xml</simple>
      </transform>
      <log message="Parsing agents from URL: ${body}"/>
      <to uri="direct:parseJaxbXml"/>
    </route>

  </camelContext>

</blueprint>
