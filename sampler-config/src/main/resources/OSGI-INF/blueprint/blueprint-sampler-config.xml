<blueprint
	xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
	xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
	xmlns:camel="http://camel.apache.org/schema/blueprint"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0
		http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd

		http://camel.apache.org/schema/blueprint
		http://camel.apache.org/schema/blueprint/camel-blueprint-2.12.2.xsd
">

  <!-- Configuration properties -->
  <cm:property-placeholder id="samplerProperties" persistent-id="org.opennms.netmgt.sampler.config" update-strategy="none">
    <cm:default-properties>
      <cm:property name="rest.root" value="http://localhost:8980/opennms/rest"/>
      <cm:property name="location.name" value="remote" />
      <cm:property name="username" value="admin"/>
      <cm:property name="password" value="admin"/>
      <cm:property name="collectdConfigUrl" value="{{rest.root}}/config/{{location.name}}/collection"/>
      <cm:property name="agentListUrl" value="{{rest.root}}/config/agents"/>
      <cm:property name="refreshInterval" value="300000"/> <!-- milliseconds -->
    </cm:default-properties>
  </cm:property-placeholder>

  <!-- Camel unmarshalling DataFormats -->
  <bean id="jaxbXml" class="org.opennms.netmgt.api.sample.DataFormatUtils" factory-method="jaxbXml"/>

  <!-- Beans that hold a copy of a configuration object -->
  <bean id="collectdConfiguration" class="org.opennms.netmgt.api.sample.support.SingletonBeanFactoryImpl"/>
  <bean id="snmpConfiguration" class="org.opennms.netmgt.api.sample.support.SingletonBeanFactoryImpl"/>

  <service ref="collectdConfiguration" interface="org.opennms.netmgt.api.sample.support.SingletonBeanFactory">
    <service-properties>
      <entry key="beanClass" value="org.opennms.netmgt.config.collectd.CollectdConfiguration" />
    </service-properties>
  </service>

  <!-- Camel EIP helper beans -->
  <bean id="urlNormalizer" class="org.opennms.netmgt.api.sample.support.UrlNormalizer"/>
  <bean id="packageServiceSplitter" class="org.opennms.netmgt.sampler.config.internal.PackageServiceSplitter"/>
  <bean id="packageAgentAggregator" class="org.opennms.netmgt.sampler.config.internal.PackageAgentAggregator"/>

  <!-- Register a whiteboard of schedulers where agents messages will be sent -->
  <bean id="schedulingDispatcher" class="org.opennms.netmgt.api.sample.support.DispatcherWhiteboard">
    <argument value="seda:scheduleAgents"/>

    <property name="context" ref="blueprintBundleContext"/>
    <property name="messageClass" value="org.opennms.netmgt.api.sample.PackageAgentList"/>
    <property name="serviceClass" value="org.opennms.netmgt.api.sample.support.SchedulerService"/>
    <property name="methodName" value="schedule"/>
  </bean>

  <bean id="customHttpClientConfigurer" class="org.opennms.core.camel.CustomHttpClientConfigurer">
    <property name="username" value="${username}" />
    <property name="password" value="${password}" />
  </bean>

  <camelContext id="samplerConfigCamelContext" xmlns="http://camel.apache.org/schema/blueprint">
    <propertyPlaceholder id="properties" location="blueprint:samplerProperties" />

    <!-- Add exception handlers -->
    <onException>
      <exception>java.io.IOException</exception>
      <handled><constant>true</constant></handled>
      <!-- .logStackTrace(true) -->
      <stop/>
    </onException>
    <onException>
      <exception>org.apache.camel.TypeConversionException</exception>
      <handled><constant>true</constant></handled>
      <transform><constant></constant></transform>
    </onException>

    <!-- Call this to retrieve a URL in string form or URL form into the JAXB objects they represent. -->
    <route id="parseJaxbXml">
      <!-- make exceptions log, but give an empty string as return value -->
      <from uri="direct:parseJaxbXml"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: parseJaxbXml: ${body.toString()}" />
      <setHeader headerName="CamelHttpUri">
        <simple>${body.toString()}</simple>
      </setHeader>
      <setHeader headerName="CamelHttpMethod">
        <simple>GET</simple>
      </setHeader>
      <to uri="http://dummyhost?httpClientConfigurer=customHttpClientConfigurer&amp;authUsername={{username}}&amp;authPassword={{password}}&amp;authMethod=Basic" />
      <choice>
        <when>
          <simple>${body} == null</simple>
          <log loggingLevel="WARN" message="blueprint-sampler-config.xml: parseJaxbXml: Could not fetch JAXB document from: ${headers.CamelHttpUri}"/>
        </when>
        <otherwise>
          <unmarshal ref="jaxbXml"/>
        </otherwise>
      </choice>
    </route>

    <!-- Direct route to fetch the config -->
    <route id="getCollectdConfig">
      <from uri="direct:collectdConfig"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: getCollectdConfig" />
      <bean ref="collectdConfiguration" method="getInstance"/>
    </route>

    <!-- start hook -->
    <route id="triggerStartSamplerConfig">
      <from uri="timer://runOnce?repeatCount=1&amp;delay=30000" />
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Triggering Startup" />
      <to uri="direct:start" />
    </route>

    <route id="triggerReloadConfiguration">
      <from uri="timer://reloadConfigs?delay=30000&amp;period={{refreshInterval}}" />
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Reloading Configuration" />
      <to uri="direct:loadCollectdConfiguration"/>
    </route>

    <route id="startLoadConfigurations">
      <from uri="direct:start"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Loading Configuration Files" />
      <!-- Load all of the configs -->
      <multicast parallelProcessing="true">
        <to uri="direct:loadCollectdConfiguration"/>
      </multicast>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Configuration Files Loaded" />
      <!-- Launch the scheduler -->
      <to uri="direct:schedulerStart"/>
    </route>

	<!-- TODO: Create a reload timer that will check for changes to the config -->
    <route id="initializeCollectdConfigurationInstance">
      <from uri="direct:loadCollectdConfiguration"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Loading Collectd Configuration" />
      <transform><constant>{{collectdConfigUrl}}</constant></transform>
      <to uri="direct:parseJaxbXml"/>
      <filter>
        <simple>${body} != null</simple>
        <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Collectd Configuration parsed, setting instance" />
        <bean ref="collectdConfiguration" method="setInstance"/>
      </filter>
    </route>

    <!-- We could invoke direct:loadCollectionPackages directly, but we need this for test purposes -->
    <route id="schedulerStart">
      <from uri="direct:schedulerStart"/>
      <to uri="direct:loadCollectionPackages"/>
    </route>

    <!-- Get all of the collection packages that are associated with the current config -->
    <route id="loadCollectionPackages">
      <from uri="direct:loadCollectionPackages"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: getting CollectdConfiguration" />
      <!-- Replace the current message with the CollectdConfiguration -->
      <enrich uri="direct:collectdConfig"/>
      <!-- Split the CollectdConfiguration into a list of the packages that it contains -->
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Parsing CollectdConfiguration with ${body.packages.size} package(s)" />
      <transform><simple>${body.packages}</simple></transform>
      <split>
        <simple>${body}</simple>
        <!-- Split the package into a package-per-service -->
        <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Parsing package ${body.name} with ${body.services.size} service(s)" />
        <process ref="packageServiceSplitter"/>
        <!-- split each package-per-service send a message for each entry -->
        <split>
          <simple>${body}</simple>
          <to uri="seda:loadPackageAgents"/>
        </split>
      </split>
    </route>

    <route id="loadPackageAgents">
      <from uri="seda:loadPackageAgents"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Loading package agents for package ${body.name}" />
      <enrich uri="direct:getServiceAgents" strategyRef="packageAgentAggregator"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Got package agents" />
      <filter>
        <simple>${body} != null and ${body.agents} != null and ${body.agents.size} &gt; 0</simple>
        <!-- This endpoint is serviced by the schedulingDispatcher bean -->
        <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Scheduling ${body.agents.size} agents" />
        <to uri="seda:scheduleAgents"/>
      </filter>
    </route>

    <route id="getServiceAgents">
      <from uri="direct:getServiceAgents"/>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Getting service agents" />
      <transform>
        <simple>{{agentListUrl}}/${body.name}/${body.services[0].name}.xml</simple>
      </transform>
      <log loggingLevel="INFO" message="blueprint-sampler-config.xml: Parsing agents from URL: ${body}" />
      <to uri="direct:parseJaxbXml"/>
    </route>

  </camelContext>

</blueprint>
